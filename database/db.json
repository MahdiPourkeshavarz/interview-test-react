{
  "users": [
    {
      "id": 1,
      "email": "admin@gmail.com",
      "password": "$2a$10$CwTycUXWue0Thq9StjUM0uJ8O8R7BX5x5F.BnYfHWV6s5k6R/3q7i"
    },
    {
      "email": "mahdi@gmail.com",
      "password": "$2a$10$aKlFUp5mKLUtAcOvJdMdHuPxFe3FMgtzTLiDEkSQVjqd6RGt01wWK",
      "id": 2
    },
    {
      "email": "adminzadeh@gmail.com",
      "password": "$2a$10$r1JIiweQVWTFjKqGkTGvouFY3qzDY4AYML4Lb38Uj1TZVnC3smdqi",
      "id": 3
    }
  ],
  "tests": [
    {
      "username": "adminzadeh",
      "topic": "react",
      "numberofquestions": "20",
      "result": {
        "right": [
          {
            "id": 1,
            "topic": "react",
            "title": "Which of the answers are not a React component's life cycle?",
            "right": "Initialization",
            "options": ["Mounting", "Initialization", "Updating", "Unmounting"]
          },
          {
            "id": 3,
            "title": "What does `useState` hook do?",
            "topic": "react",
            "right": "Adds state to a functional component",
            "options": [
              "Adds props to a functional component",
              "Adds state to a functional component",
              "Adds lifecycle methods to a functional component",
              "Adds event listeners to a functional component"
            ]
          }
        ],
        "wrong": [
          {
            "id": 2,
            "title": "What is JSX?",
            "topic": "react",
            "right": "A syntax extension to JavaScript",
            "options": [
              "A JavaScript framework",
              "A syntax extension to JavaScript",
              "A CSS preprocessor",
              "A build tool"
            ]
          },
          {
            "id": 5,
            "title": "What is the purpose of `props` in React?",
            "topic": "react",
            "right": "To pass data from a parent component to a child component",
            "options": [
              "To manage component state",
              "To pass data from a parent component to a child component",
              "To handle component events",
              "To define component styles"
            ]
          }
        ],
        "withoutAnswer": [
          {
            "id": 4,
            "title": "What does `useEffect` hook do?",
            "topic": "react",
            "right": "Performs side effects in functional components",
            "options": [
              "Updates the component's state",
              "Performs side effects in functional components",
              "Renders the component",
              "Handles component events"
            ]
          }
        ]
      },
      "id": 1
    },
    {
      "username": "adminzadeh",
      "topic": "javascript",
      "numberofquestions": "20",
      "result": {
        "right": [
          {
            "id": 21,
            "title": "What is the difference between `==` and `===` in JavaScript?",
            "topic": "javascript",
            "right": "`===` checks for strict equality (value and type), `==` performs type coercion",
            "options": [
              "`==` checks for strict equality, `===` performs type coercion",
              "`===` checks for strict equality (value and type), `==` performs type coercion",
              "There is no difference",
              "`==` is faster than `===`"
            ]
          }
        ],
        "wrong": [
          {
            "id": 22,
            "title": "What is hoisting in JavaScript?",
            "topic": "javascript",
            "right": "The behavior where variables and function declarations are moved to the top of their scope",
            "options": [
              "A way to optimize JavaScript code",
              "The behavior where variables and function declarations are moved to the top of their scope",
              "A type of error in JavaScript",
              "A way to create closures"
            ]
          }
        ],
        "withoutAnswer": [
          {
            "id": 23,
            "title": "What is a closure in JavaScript?",
            "topic": "javascript",
            "right": "A function that has access to variables from its surrounding scope even after that scope has finished executing",
            "options": [
              "A type of loop",
              "A function that has access to variables from its surrounding scope even after that scope has finished executing",
              "A way to create objects",
              "A type of error"
            ]
          }
        ]
      },
      "id": 2
    },
    {
      "username": "adminzadeh",
      "topic": "javascript",
      "numberofquestions": "20",
      "result": {
        "right": [
          {
            "id": 22,
            "title": "What is hoisting in JavaScript?",
            "topic": "javascript",
            "right": "The behavior where variables and function declarations are moved to the top of their scope",
            "options": [
              "A way to optimize JavaScript code",
              "The behavior where variables and function declarations are moved to the top of their scope",
              "A type of error in JavaScript",
              "A way to create closures"
            ]
          },
          {
            "id": 24,
            "title": "What is the `this` keyword in JavaScript?",
            "topic": "javascript",
            "right": "It refers to the object that is executing the current function",
            "options": [
              "It always refers to the global object",
              "It refers to the object that is executing the current function",
              "It is a reserved keyword with no meaning",
              "It refers to the current function"
            ]
          },
          {
            "id": 26,
            "title": "What is the difference between `let`, `const`, and `var`?",
            "topic": "javascript",
            "right": "`let` and `const` are block-scoped, `var` is function-scoped",
            "options": [
              "`let`, `const`, and `var` are all block-scoped",
              "`let` and `const` are function-scoped, `var` is block-scoped",
              "`let`, `const`, and `var` are all globally scoped",
              "`let` and `const` are block-scoped, `var` is function-scoped"
            ]
          },
          {
            "id": 27,
            "title": "What is an asynchronous operation in JavaScript?",
            "right": "An operation that doesn't block the execution of other code",
            "options": [
              "An operation that always completes immediately",
              "An operation that blocks the execution of other code",
              "An operation that is always synchronous",
              "An operation that doesn't block the execution of other code"
            ]
          }
        ],
        "wrong": [
          {
            "id": 23,
            "title": "What is a closure in JavaScript?",
            "topic": "javascript",
            "right": "A function that has access to variables from its surrounding scope even after that scope has finished executing",
            "options": [
              "A type of loop",
              "A function that has access to variables from its surrounding scope even after that scope has finished executing",
              "A way to create objects",
              "A type of error"
            ]
          },
          {
            "id": 29,
            "title": "What is a promise in JavaScript?",
            "topic": "javascript",
            "right": "An object representing the eventual completion (or failure) of an asynchronous operation",
            "options": [
              "A type of function",
              "An object representing the eventual completion (or failure) of an asynchronous operation",
              "A type of variable",
              "A way to handle events"
            ]
          }
        ],
        "withoutAnswer": [
          {
            "id": 20,
            "title": "What is the difference between `==` and `===` in JavaScript?",
            "topic": "javascript",
            "right": "`===` checks for strict equality (value and type), `==` performs type coercion",
            "options": [
              "`==` checks for strict equality, `===` performs type coercion",
              "`===` checks for strict equality (value and type), `==` performs type coercion",
              "There is no difference",
              "`==` is faster than `===`"
            ]
          },
          {
            "id": 25,
            "title": "What is prototypal inheritance in JavaScript?",
            "topic": "javascript",
            "right": "Objects inherit properties and methods from their prototype object",
            "options": [
              "Objects inherit properties and methods from their parent class",
              "Objects inherit properties and methods from their prototype object",
              "A type of class inheritance",
              "A way to create functions"
            ]
          }
        ]
      },
      "id": 3
    },
    {
      "username": "adminzadeh",
      "topic": "react",
      "numberofquestions": "20",
      "result": {
        "right": [
          {
            "id": 5,
            "title": "What is the purpose of `props` in React?",
            "topic": "react",
            "right": "To pass data from a parent component to a child component",
            "options": [
              "To manage component state",
              "To pass data from a parent component to a child component",
              "To handle component events",
              "To define component styles"
            ]
          },
          {
            "id": 7,
            "title": "How do you conditionally render elements in React?",
            "topic": "react",
            "right": "Using if statements or ternary operators",
            "options": [
              "Using loops",
              "Using if statements or ternary operators",
              "Using switch statements",
              "Using map functions"
            ]
          },
          {
            "id": 12,
            "title": "What is the purpose of `ref` in React?",
            "topic": "react",
            "right": "To directly access the DOM element",
            "options": [
              "To manage component state",
              "To pass data to child components",
              "To directly access the DOM element",
              "To handle component events"
            ]
          },
          {
            "id": 16,
            "title": "What is Fragment in React?",
            "topic": "react",
            "right": "A way to group elements without adding extra nodes to the DOM",
            "options": [
              "A type of component",
              "A way to group elements without adding extra nodes to the DOM",
              "A way to style components",
              "A way to handle events"
            ]
          }
        ],
        "wrong": [
          {
            "id": 1,
            "title": "Which of the answers are not a React components life cycle?",
            "topic": "react",
            "right": "Initialization",
            "options": ["Mounting", "Initialization", "Updating", "Unmounting"]
          },
          {
            "id": 9,
            "title": "How do you pass data down to child components?",
            "right": "Through props",
            "options": [
              "Through state",
              "Through props",
              "Through context",
              "Through refs"
            ]
          },
          {
            "id": 14,
            "title": "What is reconciliation in React?",
            "topic": "react",
            "right": "The process of updating the actual DOM efficiently",
            "options": [
              "The process of rendering components",
              "The process of updating the actual DOM efficiently",
              "The process of handling events",
              "The process of creating components"
            ]
          }
        ],
        "withoutAnswer": [
          {
            "id": 3,
            "title": "What does `useState` hook do?",
            "topic": "react",
            "right": "Adds state to a functional component",
            "options": [
              "Adds props to a functional component",
              "Adds state to a functional component",
              "Adds lifecycle methods to a functional component",
              "Adds event listeners to a functional component"
            ]
          },
          {
            "id": 4,
            "title": "What does `useEffect` hook do?",
            "topic": "react",
            "right": "Performs side effects in functional components",
            "options": [
              "Updates the components state",
              "Performs side effects in functional components",
              "Renders the component",
              "Handles component events"
            ]
          },
          {
            "id": 8,
            "title": "What is the role of keys in React lists?",
            "topic": "react",
            "right": "To help React identify which items have changed, added, or removed",
            "options": [
              "To style list items",
              "To help React identify which items have changed, added, or removed",
              "To add event listeners to list items",
              "To store data associated with list items"
            ]
          },
          {
            "id": 17,
            "title": "What is the purpose of `React.StrictMode`?",
            "topic": "react",
            "right": "To highlight potential problems in your application",
            "options": [
              "To improve performance",
              "To highlight potential problems in your application",
              "To enable server-side rendering",
              "To manage component state"
            ]
          }
        ]
      },
      "id": 4
    },
    {
      "username": "meitipk",
      "topic": "javascript",
      "numberofquestions": 20,
      "result": {
        "right": [
          {
            "id": 101,
            "topic": "react",
            "title": "What is the purpose of `ReactDOM.createPortal()`?",
            "right": "To render children into a DOM node outside the parent component",
            "options": [
              "To create a new component",
              "To manage state in components",
              "To render children into a DOM node outside the parent component",
              "To handle component errors"
            ]
          },
          {
            "id": 89,
            "topic": "react",
            "title": "What is the purpose of `useRef` in React?",
            "right": "To persist values across renders without causing re-renders",
            "options": [
              "To force component updates",
              "To persist values across renders without causing re-renders",
              "To create controlled components",
              "To manage state"
            ]
          },
          {
            "id": 19,
            "title": "How to update state correctly in a React functional component?",
            "topic": "react",
            "right": "Using the setState function from useState hook",
            "options": [
              "Directly modifying the state variable",
              "Using the setState function from useState hook",
              "Using a lifecycle method",
              "Using a callback function"
            ]
          },
          {
            "id": 107,
            "topic": "react",
            "title": "What is the purpose of `useMemo`?",
            "right": "To memoize expensive functions and optimize performance",
            "options": [
              "To manage state",
              "To memoize expensive functions and optimize performance",
              "To handle routing",
              "To control lifecycle methods"
            ]
          },
          {
            "id": 71,
            "topic": "react",
            "title": "What does `useReducer` hook do?",
            "right": "Manages complex state logic in functional components",
            "options": [
              "Handles component styling",
              "Manages complex state logic in functional components",
              "Handles side effects",
              "Manages event listeners"
            ]
          },
          {
            "id": 77,
            "topic": "react",
            "title": "What is the purpose of `React.lazy()`?",
            "right": "To lazily load components as they are needed",
            "options": [
              "To eagerly load components",
              "To lazily load components as they are needed",
              "To render components immediately",
              "To handle component errors"
            ]
          },
          {
            "id": 5,
            "title": "What is the purpose of `props` in React?",
            "topic": "react",
            "right": "To pass data from a parent component to a child component",
            "options": [
              "To manage component state",
              "To pass data from a parent component to a child component",
              "To handle component events",
              "To define component styles"
            ]
          },
          {
            "id": 83,
            "topic": "react",
            "title": "What is Redux used for in React?",
            "right": "To manage global state",
            "options": [
              "To manage component lifecycle",
              "To style components",
              "To handle routing",
              "To manage global state"
            ]
          },
          {
            "id": 4,
            "title": "What does `useEffect` hook do?",
            "topic": "react",
            "right": "Performs side effects in functional components",
            "options": [
              "Updates the components state",
              "Performs side effects in functional components",
              "Renders the component",
              "Handles component events"
            ]
          },
          {
            "id": 65,
            "topic": "react",
            "title": "What is a higher-order component in React?",
            "right": "A function that takes a component and returns a new component",
            "options": [
              "A component that manages state",
              "A function that takes a component and returns a new component",
              "A component that handles events",
              "A function that updates the DOM"
            ]
          },
          {
            "id": 16,
            "title": "What is Fragment in React?",
            "topic": "react",
            "right": "A way to group elements without adding extra nodes to the DOM",
            "options": [
              "A type of component",
              "A way to group elements without adding extra nodes to the DOM",
              "A way to style components",
              "A way to handle events"
            ]
          },
          {
            "id": 62,
            "topic": "react",
            "title": "What is React Router used for?",
            "right": "To handle routing in React applications",
            "options": [
              "To manage state",
              "To handle routing in React applications",
              "To style components",
              "To manage events"
            ]
          }
        ],
        "wrong": [
          {
            "id": 7,
            "title": "How do you conditionally render elements in React?",
            "topic": "react",
            "right": "Using if statements or ternary operators",
            "options": [
              "Using loops",
              "Using if statements or ternary operators",
              "Using switch statements",
              "Using map functions"
            ]
          },
          {
            "id": 1,
            "topic": "react",
            "title": "Which of the answers are not a React components life cycle?",
            "right": "Initialization",
            "options": ["Mounting", "Initialization", "Updating", "Unmounting"]
          },
          {
            "id": 14,
            "title": "What is reconciliation in React?",
            "topic": "react",
            "right": "The process of updating the actual DOM efficiently",
            "options": [
              "The process of rendering components",
              "The process of updating the actual DOM efficiently",
              "The process of handling events",
              "The process of creating components"
            ]
          },
          {
            "id": 74,
            "topic": "react",
            "title": "What is `React.Fragment` used for?",
            "right": "To wrap multiple elements without adding extra nodes to the DOM",
            "options": [
              "To style components",
              "To manage state",
              "To wrap multiple elements without adding extra nodes to the DOM",
              "To handle events"
            ]
          },
          {
            "id": 8,
            "title": "What is the role of keys in React lists?",
            "topic": "react",
            "right": "To help React identify which items have changed, added, or removed",
            "options": [
              "To style list items",
              "To help React identify which items have changed, added, or removed",
              "To add event listeners to list items",
              "To store data associated with list items"
            ]
          }
        ],
        "withoutAnswer": [
          {
            "id": 13,
            "title": "What is virtual DOM?",
            "topic": "react",
            "right": "An in-memory representation of the actual DOM",
            "options": [
              "A faster version of the real DOM",
              "An in-memory representation of the actual DOM",
              "A way to style React components",
              "A way to handle events in React"
            ]
          },
          {
            "id": 18,
            "title": "What is the difference between functional and class components?",
            "topic": "react",
            "right": "Functional components are simpler and use hooks, class components use lifecycle methods",
            "options": [
              "Functional components are faster, class components are slower",
              "Functional components use state, class components don't",
              "Functional components are legacy, class components are modern",
              "Functional components are simpler and use hooks, class components use lifecycle methods"
            ]
          },
          {
            "id": 10,
            "title": "What is React Context API used for?",
            "topic": "react",
            "right": "To pass data through the component tree without prop drilling",
            "options": [
              "To manage component state",
              "To pass data through the component tree without prop drilling",
              "To handle component events",
              "To define component styles"
            ]
          }
        ]
      },
      "id": 7
    },
    {
      "username": "meitipk",
      "topic": "react",
      "numberofquestions": 20,
      "result": {
        "right": [
          {
            "id": 80,
            "topic": "react",
            "title": "What is a controlled component in React?",
            "right": "A component that is controlled by React state",
            "options": [
              "A component that has its own state",
              "A component that is controlled by React state",
              "A component that controls other components",
              "A component that manages its own events"
            ]
          },
          {
            "id": 19,
            "title": "How to update state correctly in a React functional component?",
            "topic": "react",
            "right": "Using the setState function from useState hook",
            "options": [
              "Directly modifying the state variable",
              "Using the setState function from useState hook",
              "Using a lifecycle method",
              "Using a callback function"
            ]
          },
          {
            "id": 18,
            "title": "What is the difference between functional and class components?",
            "topic": "react",
            "right": "Functional components are simpler and use hooks, class components use lifecycle methods",
            "options": [
              "Functional components are faster, class components are slower",
              "Functional components use state, class components don't",
              "Functional components are legacy, class components are modern",
              "Functional components are simpler and use hooks, class components use lifecycle methods"
            ]
          }
        ],
        "wrong": [
          {
            "id": 17,
            "title": "What is the purpose of `React.StrictMode`?",
            "topic": "react",
            "right": "To highlight potential problems in your application",
            "options": [
              "To improve performance",
              "To highlight potential problems in your application",
              "To enable server-side rendering",
              "To manage component state"
            ]
          },
          {
            "id": 4,
            "title": "What does `useEffect` hook do?",
            "topic": "react",
            "right": "Performs side effects in functional components",
            "options": [
              "Updates the components state",
              "Performs side effects in functional components",
              "Renders the component",
              "Handles component events"
            ]
          },
          {
            "id": 62,
            "topic": "react",
            "title": "What is React Router used for?",
            "right": "To handle routing in React applications",
            "options": [
              "To manage state",
              "To handle routing in React applications",
              "To style components",
              "To manage events"
            ]
          },
          {
            "id": 14,
            "title": "What is reconciliation in React?",
            "topic": "react",
            "right": "The process of updating the actual DOM efficiently",
            "options": [
              "The process of rendering components",
              "The process of updating the actual DOM efficiently",
              "The process of handling events",
              "The process of creating components"
            ]
          }
        ],
        "withoutAnswer": [
          {
            "id": 15,
            "title": "How do you prevent default behavior of an event?",
            "topic": "react",
            "right": "Using `event.preventDefault()`",
            "options": [
              "Using `event.stopPropagation()`",
              "Using `event.preventDefault()`",
              "Using `event.stopImmediatePropagation()`",
              "Using `event.cancel()`"
            ]
          },
          {
            "id": 71,
            "topic": "react",
            "title": "What does `useReducer` hook do?",
            "right": "Manages complex state logic in functional components",
            "options": [
              "Handles component styling",
              "Manages complex state logic in functional components",
              "Handles side effects",
              "Manages event listeners"
            ]
          },
          {
            "id": 86,
            "topic": "react",
            "title": "What is the purpose of `useContext` in React?",
            "right": "To access context values without wrapping components with Context.Consumer",
            "options": [
              "To create new context",
              "To access context values without wrapping components with Context.Consumer",
              "To manage component state",
              "To handle side effects"
            ]
          },
          {
            "id": 83,
            "topic": "react",
            "title": "What is Redux used for in React?",
            "right": "To manage global state",
            "options": [
              "To manage component lifecycle",
              "To style components",
              "To handle routing",
              "To manage global state"
            ]
          },
          {
            "id": 104,
            "topic": "react",
            "title": "What is the purpose of `useEffect`?",
            "right": "To perform side effects in function components",
            "options": [
              "To manage component state",
              "To perform side effects in function components",
              "To handle events",
              "To define component styles"
            ]
          },
          {
            "id": 98,
            "topic": "react",
            "title": "How can you optimize performance in a React app?",
            "right": "Using memoization and React.PureComponent",
            "options": [
              "By increasing the component size",
              "Using memoization and React.PureComponent",
              "By rendering everything at once",
              "Avoiding use of hooks"
            ]
          },
          {
            "id": 92,
            "topic": "react",
            "title": "What is the purpose of `useCallback` in React?",
            "right": "To memoize functions and optimize performance",
            "options": [
              "To manage component lifecycle",
              "To memoize functions and optimize performance",
              "To handle events",
              "To control component rendering"
            ]
          },
          {
            "id": 11,
            "title": "What is a higher-order component (HOC)?",
            "topic": "react",
            "right": "A function that takes a component and returns a new enhanced component",
            "options": [
              "A component with multiple child components",
              "A function that takes a component and returns a new enhanced component",
              "A component that uses context API",
              "A component that uses hooks"
            ]
          },
          {
            "id": 65,
            "topic": "react",
            "title": "What is a higher-order component in React?",
            "right": "A function that takes a component and returns a new component",
            "options": [
              "A component that manages state",
              "A function that takes a component and returns a new component",
              "A component that handles events",
              "A function that updates the DOM"
            ]
          },
          {
            "id": 8,
            "title": "What is the role of keys in React lists?",
            "topic": "react",
            "right": "To help React identify which items have changed, added, or removed",
            "options": [
              "To style list items",
              "To help React identify which items have changed, added, or removed",
              "To add event listeners to list items",
              "To store data associated with list items"
            ]
          },
          {
            "id": 10,
            "title": "What is React Context API used for?",
            "topic": "react",
            "right": "To pass data through the component tree without prop drilling",
            "options": [
              "To manage component state",
              "To pass data through the component tree without prop drilling",
              "To handle component events",
              "To define component styles"
            ]
          },
          {
            "id": 95,
            "topic": "react",
            "title": "What is JSX?",
            "right": "A syntax extension for JavaScript used in React",
            "options": [
              "A server-side framework",
              "A syntax extension for JavaScript used in React",
              "A CSS preprocessor",
              "A build tool"
            ]
          },
          {
            "id": 9,
            "title": "How do you pass data down to child components?",
            "topic": "react",
            "right": "Through props",
            "options": [
              "Through state",
              "Through props",
              "Through context",
              "Through refs"
            ]
          }
        ]
      },
      "id": 8
    }
  ],
  "topics": [
    {
      "id": 1,
      "name": "react",
      "imgSrc": "https://jslib.dev/wp-content/uploads/2022/03/Reactlogo.jpg",
      "timeUnit": "60",
      "participants": 4
    },
    {
      "id": 2,
      "name": "javascript",
      "imgSrc": "https://i.morioh.com/2023/10/04/8621719f.webp",
      "timeUnit": "50",
      "participants": "3"
    },
    {
      "name": "python",
      "imgSrc": "https://logos-world.net/wp-content/uploads/2021/10/Python-Logo.png",
      "timeUnit": "70",
      "participants": "0",
      "id": 3
    },
    {
      "name": "go",
      "timeUnit": "50",
      "imgSrc": "https://www.freecodecamp.org/news/content/images/size/w2000/2021/10/golang.png",
      "id": 4
    }
  ],
  "questions": [
    {
      "id": 1,
      "topic": "react",
      "title": "Which of the answers are not a React components life cycle?",
      "right": "Initialization",
      "options": ["Mounting", "Initialization", "Updating", "Unmounting"]
    },
    {
      "id": 2,
      "title": "What is JSX?",
      "topic": "react",
      "right": "A syntax extension to JavaScript",
      "options": [
        "A JavaScript framework",
        "A syntax extension to JavaScript",
        "A CSS preprocessor",
        "A build tool"
      ]
    },
    {
      "id": 3,
      "title": "What does `useState` hook do?",
      "topic": "react",
      "right": "Adds state to a functional component",
      "options": [
        "Adds props to a functional component",
        "Adds state to a functional component",
        "Adds lifecycle methods to a functional component",
        "Adds event listeners to a functional component"
      ]
    },
    {
      "id": 4,
      "title": "What does `useEffect` hook do?",
      "topic": "react",
      "right": "Performs side effects in functional components",
      "options": [
        "Updates the components state",
        "Performs side effects in functional components",
        "Renders the component",
        "Handles component events"
      ]
    },
    {
      "id": 5,
      "title": "What is the purpose of `props` in React?",
      "topic": "react",
      "right": "To pass data from a parent component to a child component",
      "options": [
        "To manage component state",
        "To pass data from a parent component to a child component",
        "To handle component events",
        "To define component styles"
      ]
    },
    {
      "id": 6,
      "title": "What is the difference between `state` and `props`?",
      "topic": "react",
      "right": "State is internal to a component, props are external",
      "options": [
        "State is immutable, props are mutable",
        "State is external to a component, props are internal",
        "State is for styling, props are for data",
        "State is internal to a component, props are external"
      ]
    },
    {
      "id": 7,
      "title": "How do you conditionally render elements in React?",
      "topic": "react",
      "right": "Using if statements or ternary operators",
      "options": [
        "Using loops",
        "Using if statements or ternary operators",
        "Using switch statements",
        "Using map functions"
      ]
    },
    {
      "id": 8,
      "title": "What is the role of keys in React lists?",
      "topic": "react",
      "right": "To help React identify which items have changed, added, or removed",
      "options": [
        "To style list items",
        "To help React identify which items have changed, added, or removed",
        "To add event listeners to list items",
        "To store data associated with list items"
      ]
    },
    {
      "id": 9,
      "title": "How do you pass data down to child components?",
      "topic": "react",
      "right": "Through props",
      "options": [
        "Through state",
        "Through props",
        "Through context",
        "Through refs"
      ]
    },
    {
      "id": 10,
      "title": "What is React Context API used for?",
      "topic": "react",
      "right": "To pass data through the component tree without prop drilling",
      "options": [
        "To manage component state",
        "To pass data through the component tree without prop drilling",
        "To handle component events",
        "To define component styles"
      ]
    },
    {
      "id": 11,
      "title": "What is a higher-order component (HOC)?",
      "topic": "react",
      "right": "A function that takes a component and returns a new enhanced component",
      "options": [
        "A component with multiple child components",
        "A function that takes a component and returns a new enhanced component",
        "A component that uses context API",
        "A component that uses hooks"
      ]
    },
    {
      "id": 12,
      "title": "What is the purpose of `ref` in React?",
      "topic": "react",
      "right": "To directly access the DOM element",
      "options": [
        "To manage component state",
        "To pass data to child components",
        "To directly access the DOM element",
        "To handle component events"
      ]
    },
    {
      "id": 13,
      "title": "What is virtual DOM?",
      "topic": "react",
      "right": "An in-memory representation of the actual DOM",
      "options": [
        "A faster version of the real DOM",
        "An in-memory representation of the actual DOM",
        "A way to style React components",
        "A way to handle events in React"
      ]
    },
    {
      "id": 14,
      "title": "What is reconciliation in React?",
      "topic": "react",
      "right": "The process of updating the actual DOM efficiently",
      "options": [
        "The process of rendering components",
        "The process of updating the actual DOM efficiently",
        "The process of handling events",
        "The process of creating components"
      ]
    },
    {
      "id": 15,
      "title": "How do you prevent default behavior of an event?",
      "topic": "react",
      "right": "Using `event.preventDefault()`",
      "options": [
        "Using `event.stopPropagation()`",
        "Using `event.preventDefault()`",
        "Using `event.stopImmediatePropagation()`",
        "Using `event.cancel()`"
      ]
    },
    {
      "id": 16,
      "title": "What is Fragment in React?",
      "topic": "react",
      "right": "A way to group elements without adding extra nodes to the DOM",
      "options": [
        "A type of component",
        "A way to group elements without adding extra nodes to the DOM",
        "A way to style components",
        "A way to handle events"
      ]
    },
    {
      "id": 17,
      "title": "What is the purpose of `React.StrictMode`?",
      "topic": "react",
      "right": "To highlight potential problems in your application",
      "options": [
        "To improve performance",
        "To highlight potential problems in your application",
        "To enable server-side rendering",
        "To manage component state"
      ]
    },
    {
      "id": 18,
      "title": "What is the difference between functional and class components?",
      "topic": "react",
      "right": "Functional components are simpler and use hooks, class components use lifecycle methods",
      "options": [
        "Functional components are faster, class components are slower",
        "Functional components use state, class components don't",
        "Functional components are legacy, class components are modern",
        "Functional components are simpler and use hooks, class components use lifecycle methods"
      ]
    },
    {
      "id": 19,
      "title": "How to update state correctly in a React functional component?",
      "topic": "react",
      "right": "Using the setState function from useState hook",
      "options": [
        "Directly modifying the state variable",
        "Using the setState function from useState hook",
        "Using a lifecycle method",
        "Using a callback function"
      ]
    },
    {
      "id": 20,
      "title": "What is the difference between `==` and `===` in JavaScript?",
      "topic": "javascript",
      "right": "`===` checks for strict equality (value and type), `==` performs type coercion",
      "options": [
        "`==` checks for strict equality, `===` performs type coercion",
        "`===` checks for strict equality (value and type), `==` performs type coercion",
        "There is no difference",
        "`==` is faster than `===`"
      ]
    },
    {
      "id": 21,
      "title": "What is hoisting in JavaScript?",
      "topic": "javascript",
      "right": "The behavior where variables and function declarations are moved to the top of their scope",
      "options": [
        "A way to optimize JavaScript code",
        "The behavior where variables and function declarations are moved to the top of their scope",
        "A type of error in JavaScript",
        "A way to create closures"
      ]
    },
    {
      "id": 22,
      "title": "What is a closure in JavaScript?",
      "topic": "javascript",
      "right": "A function that has access to variables from its surrounding scope even after that scope has finished executing",
      "options": [
        "A type of loop",
        "A function that has access to variables from its surrounding scope even after that scope has finished executing",
        "A way to create objects",
        "A type of error"
      ]
    },
    {
      "id": 23,
      "title": "What is the `this` keyword in JavaScript?",
      "topic": "javascript",
      "right": "It refers to the object that is executing the current function",
      "options": [
        "It always refers to the global object",
        "It refers to the object that is executing the current function",
        "It is a reserved keyword with no meaning",
        "It refers to the current function"
      ]
    },
    {
      "id": 24,
      "title": "What is prototypal inheritance in JavaScript?",
      "topic": "javascript",
      "right": "Objects inherit properties and methods from their prototype object",
      "options": [
        "Objects inherit properties and methods from their parent class",
        "Objects inherit properties and methods from their prototype object",
        "A type of class inheritance",
        "A way to create functions"
      ]
    },
    {
      "id": 25,
      "title": "What is the difference between `let`, `const`, and `var`?",
      "topic": "javascript",
      "right": "`let` and `const` are block-scoped, `var` is function-scoped",
      "options": [
        "`let`, `const`, and `var` are all block-scoped",
        "`let` and `const` are function-scoped, `var` is block-scoped",
        "`let`, `const`, and `var` are all globally scoped",
        "`let` and `const` are block-scoped, `var` is function-scoped"
      ]
    },
    {
      "id": 26,
      "title": "What is an asynchronous operation in JavaScript?",
      "topic": "javascript",
      "right": "An operation that doesn't block the execution of other code",
      "options": [
        "An operation that always completes immediately",
        "An operation that blocks the execution of other code",
        "An operation that is always synchronous",
        "An operation that doesn't block the execution of other code"
      ]
    },
    {
      "id": 27,
      "title": "How do you handle asynchronous operations in JavaScript?",
      "topic": "javascript",
      "right": "Using promises or async/await",
      "options": [
        "Using callbacks",
        "Using promises or async/await",
        "Using synchronous functions",
        "Using timers"
      ]
    },
    {
      "id": 28,
      "title": "What is a promise in JavaScript?",
      "topic": "javascript",
      "right": "An object representing the eventual completion (or failure) of an asynchronous operation",
      "options": [
        "A type of function",
        "An object representing the eventual completion (or failure) of an asynchronous operation",
        "A type of variable",
        "A way to handle events"
      ]
    },
    {
      "id": 29,
      "title": "What is async/await in JavaScript?",
      "topic": "javascript",
      "right": "A syntax for writing asynchronous code that makes it look and behave a bit more like synchronous code",
      "options": [
        "A type of loop",
        "A syntax for writing asynchronous code that makes it look and behave a bit more like synchronous code",
        "A way to create objects",
        "A type of error"
      ]
    },
    {
      "id": 30,
      "title": "What is JSON?",
      "topic": "javascript",
      "right": "JavaScript Object Notation, a lightweight data-interchange format",
      "options": [
        "A JavaScript framework",
        "JavaScript Object Notation, a lightweight data-interchange format",
        "A type of database",
        "A programming language"
      ]
    },
    {
      "id": 31,
      "title": "How do you parse JSON data in JavaScript?",
      "topic": "javascript",
      "right": "Using `JSON.parse()`",
      "options": [
        "Using `JSON.stringify()`",
        "Using `eval()`",
        "Using `JSON.parse()`",
        "Using `parseInt()`"
      ]
    },
    {
      "id": 32,
      "title": "How do you stringify a JavaScript object into JSON?",
      "topic": "javascript",
      "right": "Using `JSON.stringify()`",
      "options": [
        "Using `JSON.parse()`",
        "Using `toString()`",
        "Using `JSON.stringify()`",
        "Using `String()`"
      ]
    },
    {
      "id": 33,
      "title": "What is the DOM (Document Object Model)?",
      "topic": "javascript",
      "right": "A programming interface for HTML and XML documents",
      "options": [
        "A type of database",
        "A programming interface for HTML and XML documents",
        "A JavaScript framework",
        "A way to style web pages"
      ]
    },
    {
      "id": 34,
      "title": "How do you select elements in the DOM using JavaScript?",
      "topic": "javascript",
      "right": "Using methods like `getElementById`, `querySelector`, `querySelectorAll`",
      "options": [
        "Using CSS selectors directly",
        "Using methods like `getElementById`, `querySelector`, `querySelectorAll`",
        "Using XPath expressions",
        "Using jQuery"
      ]
    },
    {
      "id": 35,
      "title": "What is an event listener in JavaScript?",
      "topic": "javascript",
      "right": "A function that is called when a specific event occurs on an element",
      "options": [
        "A type of loop",
        "A function that is called when a specific event occurs on an element",
        "A way to create objects",
        "A type of variable"
      ]
    },
    {
      "id": 36,
      "title": "How do you add an event listener to an element?",
      "topic": "javascript",
      "right": "Using `addEventListener()`",
      "options": [
        "Using `attachEvent()`",
        "Using `addEventListener()`",
        "Using `onEvent()`",
        "Using `handleEvent()`"
      ]
    },
    {
      "id": 37,
      "title": "What is the difference between `setInterval` and `setTimeout`?",
      "topic": "javascript",
      "right": "`setInterval` repeatedly calls a function, `setTimeout` calls a function once after a delay",
      "options": [
        "`setInterval` calls a function once, `setTimeout` repeatedly calls a function",
        "`setInterval` and `setTimeout` are the same",
        "`setInterval` is faster than `setTimeout`",
        "`setInterval` repeatedly calls a function, `setTimeout` calls a function once after a delay"
      ]
    },
    {
      "id": 38,
      "title": "What is a callback function?",
      "topic": "javascript",
      "right": "A function passed as an argument to another function",
      "options": [
        "A function that always returns true",
        "A function that always returns false",
        "A function passed as an argument to another function",
        "A function that is never executed"
      ]
    },
    {
      "id": 39,
      "title": "What is the purpose of `try...catch` in JavaScript?",
      "topic": "javascript",
      "right": "To handle errors gracefully and prevent the program from crashing",
      "options": [
        "To improve performance",
        "To handle errors gracefully and prevent the program from crashing",
        "To debug code",
        "To optimize code"
      ]
    },
    {
      "id": 40,
      "topic": "python",
      "title": "What is the output of `print(type(5))`?",
      "right": "<class 'int'>",
      "options": [
        "<class 'str'>",
        "<class 'float'>",
        "<class 'int'>",
        "<class 'bool'>"
      ]
    },
    {
      "id": 41,
      "title": "What does `len()` function do?",
      "topic": "python",
      "right": "Returns the length of an object",
      "options": [
        "Prints the object",
        "Returns the length of an object",
        "Adds elements to an object",
        "Removes elements from an object"
      ]
    },
    {
      "id": 42,
      "title": "What is a list comprehension?",
      "topic": "python",
      "right": "A concise way to create lists",
      "options": [
        "A type of loop",
        "A concise way to create lists",
        "A way to define functions",
        "A way to handle exceptions"
      ]
    },
    {
      "id": 43,
      "title": "What does the `in` operator do?",
      "topic": "python",
      "right": "Checks if an item is in a sequence",
      "options": [
        "Adds an item to a sequence",
        "Removes an item from a sequence",
        "Checks if an item is in a sequence",
        "Sorts a sequence"
      ]
    },
    {
      "id": 44,
      "title": "What is a dictionary?",
      "topic": "python",
      "right": "A collection of key-value pairs",
      "options": [
        "An ordered sequence of items",
        "A collection of key-value pairs",
        "A set of unique items",
        "A tuple of items"
      ]
    },
    {
      "id": 45,
      "title": "What is a tuple?",
      "topic": "python",
      "right": "An ordered, immutable sequence of items",
      "options": [
        "An ordered, mutable sequence of items",
        "An unordered collection of unique items",
        "An ordered, immutable sequence of items",
        "A key-value pair collection"
      ]
    },
    {
      "id": 46,
      "title": "What is a set?",
      "topic": "python",
      "right": "An unordered collection of unique items",
      "options": [
        "An ordered sequence of items",
        "A collection of key-value pairs",
        "An unordered collection of unique items",
        "An ordered, immutable sequence of items"
      ]
    },
    {
      "id": 47,
      "title": "What does the `def` keyword do?",
      "topic": "python",
      "right": "Defines a function",
      "options": [
        "Defines a variable",
        "Defines a class",
        "Defines a function",
        "Defines a loop"
      ]
    },
    {
      "id": 48,
      "title": "What is the purpose of `try...except`?",
      "topic": "python",
      "right": "Handles exceptions",
      "options": [
        "Defines a loop",
        "Defines a function",
        "Handles exceptions",
        "Defines a class"
      ]
    },
    {
      "id": 49,
      "title": "What does the `keys()` method return for a dictionary?",
      "topic": "python",
      "right": "A view object containing the dictionary's keys",
      "options": [
        "A list of values",
        "A list of key-value pairs",
        "A view object containing the dictionary's keys",
        "The number of key-value pairs"
      ]
    },
    {
      "id": 50,
      "topic": "python",
      "title": "What does `import` do?",
      "right": "Imports modules",
      "options": [
        "Defines a class",
        "Imports modules",
        "Defines a function",
        "Handles exceptions"
      ]
    },
    {
      "id": 51,
      "topic": "python",
      "title": "What is the output of `print(2**3)`?",
      "right": "8",
      "options": ["6", "9", "8", "5"]
    },
    {
      "id": 52,
      "topic": "python",
      "title": "What does `//` operator do?",
      "right": "Floor division",
      "options": [
        "Floating-point division",
        "Floor division",
        "Modulo operator",
        "Exponentiation"
      ]
    },
    {
      "id": 53,
      "topic": "python",
      "title": "What does `%` operator do?",
      "right": "Modulo operator",
      "options": [
        "Floor division",
        "Floating-point division",
        "Modulo operator",
        "Exponentiation"
      ]
    },
    {
      "id": 54,
      "topic": "python",
      "title": "What is a for loop used for?",
      "right": "Iterating over a sequence",
      "options": [
        "Conditional execution",
        "Iterating over a sequence",
        "Defining a function",
        "Handling exceptions"
      ]
    },
    {
      "id": 55,
      "topic": "python",
      "title": "What is a while loop used for?",
      "right": "Repeating a block of code while a condition is true",
      "options": [
        "Iterating over a sequence",
        "Conditional execution",
        "Repeating a block of code while a condition is true",
        "Defining a function"
      ]
    },
    {
      "id": 56,
      "topic": "python",
      "title": "What is an if statement used for?",
      "right": "Conditional execution",
      "options": [
        "Iterating over a sequence",
        "Conditional execution",
        "Defining a function",
        "Handling exceptions"
      ]
    },
    {
      "id": 57,
      "topic": "python",
      "title": "What is the output of `print(True and False)`?",
      "right": "False",
      "options": ["True", "False", "Error", "None"]
    },
    {
      "id": 58,
      "topic": "python",
      "title": "What is the output of `print(True or False)`?",
      "right": "True",
      "options": ["False", "True", "Error", "None"]
    },
    {
      "id": 59,
      "topic": "python",
      "title": "What is the output of `print(not True)`?",
      "right": "False",
      "options": ["True", "False", "Error", "None"]
    },
    {
      "id": 60,
      "topic": "python",
      "title": "What is the output of `print(len([1,2,3]))`?",
      "right": "3",
      "options": ["2", "4", "3", "Error"]
    },
    {
      "id": 61,
      "topic": "python",
      "title": "How do you open a file for writing in Python?",
      "right": "f = open('myfile.txt', 'w')",
      "options": [
        "f = open('myfile.txt', 'r')",
        "f = open('myfile.txt', 'w')",
        "f = open('myfile.txt', 'a')",
        "f = open('myfile.txt', 'x')"
      ]
    },
    {
      "id": 62,
      "topic": "react",
      "title": "What is React Router used for?",
      "right": "To handle routing in React applications",
      "options": [
        "To manage state",
        "To handle routing in React applications",
        "To style components",
        "To manage events"
      ]
    },
    {
      "id": 63,
      "topic": "javascript",
      "title": "What is the use of `map()` function in JavaScript?",
      "right": "To iterate over an array and create a new array with modified elements",
      "options": [
        "To filter elements in an array",
        "To iterate over an array and create a new array with modified elements",
        "To find elements in an array",
        "To sort elements in an array"
      ]
    },
    {
      "id": 64,
      "topic": "python",
      "title": "What does the `lambda` keyword do in Python?",
      "right": "Creates an anonymous function",
      "options": [
        "Defines a class",
        "Creates an anonymous function",
        "Imports a module",
        "Creates a loop"
      ]
    },
    {
      "id": 65,
      "topic": "react",
      "title": "What is a higher-order component in React?",
      "right": "A function that takes a component and returns a new component",
      "options": [
        "A component that manages state",
        "A function that takes a component and returns a new component",
        "A component that handles events",
        "A function that updates the DOM"
      ]
    },
    {
      "id": 66,
      "topic": "javascript",
      "title": "What is the purpose of `Array.reduce()`?",
      "right": "To apply a function to each element in the array to reduce it to a single value",
      "options": [
        "To find the index of an element",
        "To apply a function to each element in the array to reduce it to a single value",
        "To split an array into smaller arrays",
        "To reverse the order of elements"
      ]
    },
    {
      "id": 67,
      "topic": "python",
      "title": "What is the output of `print('Hello'[::-1])`?",
      "right": "olleH",
      "options": ["Hello", "olleH", "Error", "None"]
    },
    {
      "id": 68,
      "topic": "react",
      "title": "What does `React.memo` do?",
      "right": "Prevents unnecessary re-renders of a component",
      "options": [
        "Manages component state",
        "Handles routing",
        "Prevents unnecessary re-renders of a component",
        "Adds event listeners"
      ]
    },
    {
      "id": 69,
      "topic": "javascript",
      "title": "What is the purpose of `Promise.all()`?",
      "right": "To run multiple promises in parallel and wait for all of them to resolve",
      "options": [
        "To reject all promises",
        "To resolve promises one by one",
        "To run multiple promises in parallel and wait for all of them to resolve",
        "To cancel promises"
      ]
    },
    {
      "id": 70,
      "topic": "python",
      "title": "How do you create a virtual environment in Python?",
      "right": "Using `python -m venv env_name`",
      "options": [
        "Using `pip install venv`",
        "Using `python -m venv env_name`",
        "Using `virtualenv env_name`",
        "Using `conda create env_name`"
      ]
    },
    {
      "id": 71,
      "topic": "react",
      "title": "What does `useReducer` hook do?",
      "right": "Manages complex state logic in functional components",
      "options": [
        "Handles component styling",
        "Manages complex state logic in functional components",
        "Handles side effects",
        "Manages event listeners"
      ]
    },
    {
      "id": 72,
      "topic": "javascript",
      "title": "What is the purpose of `fetch()` in JavaScript?",
      "right": "To make network requests",
      "options": [
        "To read local files",
        "To make network requests",
        "To write to a database",
        "To manipulate the DOM"
      ]
    },
    {
      "id": 73,
      "topic": "python",
      "title": "What does `__init__` method do in a Python class?",
      "right": "Initializes the instance of the class",
      "options": [
        "Defines the class name",
        "Initializes the instance of the class",
        "Deletes the class",
        "Copies the class"
      ]
    },
    {
      "id": 74,
      "topic": "react",
      "title": "What is `React.Fragment` used for?",
      "right": "To wrap multiple elements without adding extra nodes to the DOM",
      "options": [
        "To style components",
        "To manage state",
        "To wrap multiple elements without adding extra nodes to the DOM",
        "To handle events"
      ]
    },
    {
      "id": 75,
      "topic": "javascript",
      "title": "What is a `Symbol` in JavaScript?",
      "right": "A unique and immutable primitive value",
      "options": [
        "A type of array",
        "A way to create objects",
        "A unique and immutable primitive value",
        "A method to sort arrays"
      ]
    },
    {
      "id": 76,
      "topic": "python",
      "title": "What does `*args` do in a Python function?",
      "right": "Allows the function to accept a variable number of positional arguments",
      "options": [
        "Allows the function to accept a fixed number of positional arguments",
        "Allows the function to accept a variable number of keyword arguments",
        "Allows the function to accept a variable number of positional arguments",
        "Allows the function to return multiple values"
      ]
    },
    {
      "id": 77,
      "topic": "react",
      "title": "What is the purpose of `React.lazy()`?",
      "right": "To lazily load components as they are needed",
      "options": [
        "To eagerly load components",
        "To lazily load components as they are needed",
        "To render components immediately",
        "To handle component errors"
      ]
    },
    {
      "id": 78,
      "topic": "javascript",
      "title": "What is the `typeof` operator used for?",
      "right": "To determine the type of a variable",
      "options": [
        "To create variables",
        "To determine the type of a variable",
        "To convert variable types",
        "To delete variables"
      ]
    },
    {
      "id": 79,
      "topic": "python",
      "title": "What is a list comprehension?",
      "right": "A concise way to create lists",
      "options": [
        "A method to sort lists",
        "A concise way to create lists",
        "A function to filter lists",
        "A loop to iterate lists"
      ]
    },
    {
      "id": 80,
      "topic": "react",
      "title": "What is a controlled component in React?",
      "right": "A component that is controlled by React state",
      "options": [
        "A component that has its own state",
        "A component that is controlled by React state",
        "A component that controls other components",
        "A component that manages its own events"
      ]
    },
    {
      "id": 81,
      "topic": "javascript",
      "title": "What is event bubbling?",
      "right": "A process where an event propagates from the target element to the root",
      "options": [
        "A process where an event stops at the target element",
        "A process where an event propagates from the root to the target element",
        "A process where an event propagates from the target element to the root",
        "A process where events are ignored"
      ]
    },
    {
      "id": 82,
      "topic": "python",
      "title": "What does `self` refer to in a Python class?",
      "right": "The instance of the class",
      "options": [
        "The class itself",
        "The instance of the class",
        "The superclass",
        "A global variable"
      ]
    },
    {
      "id": 83,
      "topic": "react",
      "title": "What is Redux used for in React?",
      "right": "To manage global state",
      "options": [
        "To manage component lifecycle",
        "To style components",
        "To handle routing",
        "To manage global state"
      ]
    },
    {
      "id": 84,
      "topic": "javascript",
      "title": "What does the `bind()` method do?",
      "right": "Creates a new function with a specific `this` value",
      "options": [
        "Binds variables together",
        "Creates a new function with a specific `this` value",
        "Links two functions",
        "Stops a function from executing"
      ]
    },
    {
      "id": 85,
      "topic": "python",
      "title": "What is a generator in Python?",
      "right": "A function that returns an iterator with `yield`",
      "options": [
        "A function that returns a single value",
        "A function that returns an iterator with `yield`",
        "A method to generate random numbers",
        "A class that creates objects"
      ]
    },
    {
      "id": 86,
      "topic": "react",
      "title": "What is the purpose of `useContext` in React?",
      "right": "To access context values without wrapping components with Context.Consumer",
      "options": [
        "To create new context",
        "To access context values without wrapping components with Context.Consumer",
        "To manage component state",
        "To handle side effects"
      ]
    },
    {
      "id": 87,
      "topic": "javascript",
      "title": "What does `Array.filter()` do?",
      "right": "Creates a new array with elements that pass the test in a provided function",
      "options": [
        "Sorts the array",
        "Creates a new array with elements that pass the test in a provided function",
        "Modifies elements in place",
        "Concatenates arrays"
      ]
    },
    {
      "id": 88,
      "topic": "python",
      "title": "What does `del` keyword do in Python?",
      "right": "Deletes objects",
      "options": [
        "Declares variables",
        "Deletes objects",
        "Defines functions",
        "Destroys the interpreter"
      ]
    },
    {
      "id": 89,
      "topic": "react",
      "title": "What is the purpose of `useRef` in React?",
      "right": "To persist values across renders without causing re-renders",
      "options": [
        "To force component updates",
        "To persist values across renders without causing re-renders",
        "To create controlled components",
        "To manage state"
      ]
    },
    {
      "id": 90,
      "topic": "javascript",
      "title": "What is `localStorage` used for?",
      "right": "To store data in the browser with no expiration",
      "options": [
        "To store temporary data",
        "To store data in the browser with no expiration",
        "To manage cookies",
        "To handle session data"
      ]
    },
    {
      "id": 91,
      "topic": "python",
      "title": "What is a tuple in Python?",
      "right": "An immutable ordered collection of elements",
      "options": [
        "A mutable ordered collection of elements",
        "An immutable ordered collection of elements",
        "A mutable unordered collection of elements",
        "An immutable unordered collection of elements"
      ]
    },
    {
      "id": 92,
      "topic": "react",
      "title": "What is the purpose of `useCallback` in React?",
      "right": "To memoize functions and optimize performance",
      "options": [
        "To manage component lifecycle",
        "To memoize functions and optimize performance",
        "To handle events",
        "To control component rendering"
      ]
    },
    {
      "id": 93,
      "topic": "javascript",
      "title": "What is a closure in JavaScript?",
      "right": "A function that retains access to its outer scope variables",
      "options": [
        "A function that can be reused",
        "A function that retains access to its outer scope variables",
        "A loop that iterates indefinitely",
        "A method that binds multiple functions"
      ]
    },
    {
      "id": 94,
      "topic": "python",
      "title": "What is a decorator in Python?",
      "right": "A function that modifies another function",
      "options": [
        "A function that returns another function",
        "A function that modifies another function",
        "A method to create classes",
        "A tool to optimize performance"
      ]
    },
    {
      "id": 95,
      "topic": "react",
      "title": "What is JSX?",
      "right": "A syntax extension for JavaScript used in React",
      "options": [
        "A server-side framework",
        "A syntax extension for JavaScript used in React",
        "A CSS preprocessor",
        "A build tool"
      ]
    },
    {
      "id": 96,
      "topic": "javascript",
      "title": "What is the purpose of `setTimeout()`?",
      "right": "To execute a function after a specified delay",
      "options": [
        "To execute a function immediately",
        "To execute a function after a specified delay",
        "To repeat a function execution",
        "To stop a function execution"
      ]
    },
    {
      "id": 97,
      "topic": "python",
      "title": "What does the `open()` function do?",
      "right": "Opens a file and returns a file object",
      "options": [
        "Closes a file",
        "Opens a file and returns a file object",
        "Deletes a file",
        "Copies a file"
      ]
    },
    {
      "id": 98,
      "topic": "react",
      "title": "How can you optimize performance in a React app?",
      "right": "Using memoization and React.PureComponent",
      "options": [
        "By increasing the component size",
        "Using memoization and React.PureComponent",
        "By rendering everything at once",
        "Avoiding use of hooks"
      ]
    },
    {
      "id": 99,
      "topic": "javascript",
      "title": "What is `event.preventDefault()` used for?",
      "right": "To prevent the default action of an event",
      "options": [
        "To stop event propagation",
        "To prevent the default action of an event",
        "To trigger an event",
        "To clone an event"
      ]
    },
    {
      "id": 100,
      "topic": "python",
      "title": "How do you handle exceptions in Python?",
      "right": "Using try...except blocks",
      "options": [
        "Using if...else blocks",
        "Using try...except blocks",
        "Using switch...case blocks",
        "Using loops"
      ]
    },
    {
      "id": 101,
      "topic": "react",
      "title": "What is the purpose of `ReactDOM.createPortal()`?",
      "right": "To render children into a DOM node outside the parent component",
      "options": [
        "To create a new component",
        "To manage state in components",
        "To render children into a DOM node outside the parent component",
        "To handle component errors"
      ]
    },
    {
      "id": 102,
      "topic": "javascript",
      "title": "What is the purpose of `Array.map()`?",
      "right": "To create a new array with the results of calling a function on every element",
      "options": [
        "To sort an array",
        "To filter an array",
        "To create a new array with the results of calling a function on every element",
        "To reduce an array"
      ]
    },
    {
      "id": 103,
      "topic": "python",
      "title": "What is a list in Python?",
      "right": "An ordered collection of elements",
      "options": [
        "An unordered collection of elements",
        "An ordered collection of elements",
        "A set of unique elements",
        "A fixed-size collection of elements"
      ]
    },
    {
      "id": 104,
      "topic": "react",
      "title": "What is the purpose of `useEffect`?",
      "right": "To perform side effects in function components",
      "options": [
        "To manage component state",
        "To perform side effects in function components",
        "To handle events",
        "To define component styles"
      ]
    },
    {
      "id": 105,
      "topic": "javascript",
      "title": "What is `NaN` in JavaScript?",
      "right": "A value representing Not-a-Number",
      "options": [
        "A function for calculations",
        "A value representing Not-a-Number",
        "A type of array",
        "A method to sort numbers"
      ]
    },
    {
      "id": 106,
      "topic": "python",
      "title": "What is the purpose of `with` statement in Python?",
      "right": "To wrap the execution of a block with methods defined by a context manager",
      "options": [
        "To create a loop",
        "To define a function",
        "To wrap the execution of a block with methods defined by a context manager",
        "To import modules"
      ]
    },
    {
      "id": 107,
      "topic": "react",
      "title": "What is the purpose of `useMemo`?",
      "right": "To memoize expensive functions and optimize performance",
      "options": [
        "To manage state",
        "To memoize expensive functions and optimize performance",
        "To handle routing",
        "To control lifecycle methods"
      ]
    },
    {
      "id": 108,
      "topic": "javascript",
      "title": "What is destructuring in JavaScript?",
      "right": "A syntax for unpacking values from arrays or properties from objects",
      "options": [
        "A way to create arrays",
        "A function to sort objects",
        "A syntax for unpacking values from arrays or properties from objects",
        "A method to combine strings"
      ]
    },
    {
      "id": 109,
      "topic": "python",
      "title": "What does `super()` do in a Python class?",
      "right": "Calls a method from the parent class",
      "options": [
        "Defines a new class",
        "Calls a method from the parent class",
        "Deletes a class",
        "Initializes a class instance"
      ]
    },
    {
      "id": 110,
      "topic": "react",
      "title": "What is the purpose of `componentDidMount`?",
      "right": "To perform actions after the component has been mounted",
      "options": [
        "To update the component state",
        "To perform actions after the component has been mounted",
        "To style the component",
        "To manage event listeners"
      ]
    },
    {
      "id": 111,
      "title": "What is the purpose of Go's `goroutine`?",
      "topic": "go",
      "right": "To run a function concurrently in a lightweight thread",
      "options": [
        "To manage memory allocation",
        "To compile Go programs into machine code",
        "To run a function concurrently in a lightweight thread",
        "To handle network requests"
      ]
    },
    {
      "id": 112,
      "title": "What is the role of Go's `channel`?",
      "topic": "go",
      "right": "To enable communication and synchronization between goroutines",
      "options": [
        "To manage file I/O",
        "To enable communication and synchronization between goroutines",
        "To define data structures",
        "To handle error conditions"
      ]
    },
    {
      "id": 113,
      "title": "How do you start a goroutine in Go?",
      "topic": "go",
      "right": "Using the `go` keyword before a function call",
      "options": [
        "Using the `thread` keyword",
        "Using the `async` keyword",
        "Using the `go` keyword before a function call",
        "Using the `concurrent` keyword"
      ]
    },
    {
      "id": 114,
      "title": "What is a `select` statement used for in Go?",
      "topic": "go",
      "right": "To handle multiple channel operations concurrently",
      "options": [
        "To define loops",
        "To handle multiple channel operations concurrently",
        "To perform conditional branching",
        "To manage goroutine lifecycles"
      ]
    },
    {
      "id": 115,
      "title": "What is the purpose of Go's `defer` statement?",
      "topic": "go",
      "right": "To schedule a function call to be executed after the surrounding function returns",
      "options": [
        "To define variables",
        "To schedule a function call to be executed after the surrounding function returns",
        "To handle exceptions",
        "To create anonymous functions"
      ]
    },
    {
      "id": 116,
      "title": "What is Go's approach to error handling?",
      "topic": "go",
      "right": "Explicit error returns from functions",
      "options": [
        "Exceptions",
        "Explicit error returns from functions",
        "Try-catch blocks",
        "Automatic error detection"
      ]
    },
    {
      "id": 117,
      "title": "What is the difference between `==` and `===` in Go?",
      "topic": "go",
      "right": "Go doesn't have a `===` operator; `==` compares values",
      "options": [
        " `==` compares values, `===` compares types",
        " `==` compares types, `===` compares values",
        "Go doesn't have a `===` operator; `==` compares values",
        "They are both the same"
      ]
    },
    {
      "id": 118,
      "title": "What is the purpose of Go's `interface{}`?",
      "topic": "go",
      "right": "It's an empty interface that can hold values of any type",
      "options": [
        "It's a specific data type",
        "It's an empty interface that can hold values of any type",
        "It's used for error handling",
        "It's used for concurrency control"
      ]
    },
    {
      "id": 119,
      "title": "What is Go's built-in garbage collector responsible for?",
      "topic": "go",
      "right": "Automatic memory management",
      "options": [
        "File I/O",
        "Network communication",
        "Automatic memory management",
        "Concurrency control"
      ]
    },
    {
      "id": 120,
      "title": "What is a Go module?",
      "topic": "go",
      "right": "A way to manage dependencies in Go projects",
      "options": [
        "A type of data structure",
        "A way to manage dependencies in Go projects",
        "A type of function",
        "A way to handle errors"
      ]
    },
    {
      "id": 121,
      "title": "How do you define a struct in Go?",
      "topic": "go",
      "right": "Using the `struct` keyword",
      "options": [
        "Using the `class` keyword",
        "Using the `object` keyword",
        "Using the `struct` keyword",
        "Using the `record` keyword"
      ]
    },
    {
      "id": 122,
      "title": "What is the purpose of Go's `make` function?",
      "topic": "go",
      "right": "To allocate memory for slices, maps, and channels",
      "options": [
        "To create functions",
        "To create structs",
        "To allocate memory for slices, maps, and channels",
        "To define constants"
      ]
    },
    {
      "id": 123,
      "title": "What is the role of Go's `context` package?",
      "topic": "go",
      "right": "To manage deadlines and cancellation signals for goroutines",
      "options": [
        "To manage file I/O",
        "To manage deadlines and cancellation signals for goroutines",
        "To handle network requests",
        "To define data types"
      ]
    },
    {
      "id": 124,
      "title": "What is the purpose of Go's `sync` package?",
      "topic": "go",
      "right": "To provide synchronization primitives for concurrent programming",
      "options": [
        "To handle network communication",
        "To provide synchronization primitives for concurrent programming",
        "To manage memory allocation",
        "To define data structures"
      ]
    },
    {
      "id": 125,
      "title": "What is a Go's `mutex` used for?",
      "topic": "go",
      "right": "To protect shared resources from race conditions",
      "options": [
        "To manage memory",
        "To handle network requests",
        "To protect shared resources from race conditions",
        "To define data types"
      ]
    },
    {
      "id": 126,
      "title": "What is the `iota` keyword used for in Go?",
      "topic": "go",
      "right": "To generate sequential constants",
      "options": [
        "To define variables",
        "To generate sequential constants",
        "To create functions",
        "To handle errors"
      ]
    },
    {
      "id": 127,
      "title": "How do you handle multiple return values in Go?",
      "topic": "go",
      "right": "By listing multiple return types in the function signature",
      "options": [
        "Using exceptions",
        "By listing multiple return types in the function signature",
        "Using try-catch blocks",
        "Using a single return value with a struct"
      ]
    },
    {
      "id": 128,
      "title": "What is the purpose of Go's `reflect` package?",
      "topic": "go",
      "right": "To allow manipulation of Go values at runtime",
      "options": [
        "To manage memory",
        "To allow manipulation of Go values at runtime",
        "To handle network requests",
        "To define data structures"
      ]
    },
    {
      "id": 129,
      "title": "What is Go's philosophy regarding error handling?",
      "topic": "go",
      "right": "Explicit error checking is crucial for robust code",
      "options": [
        "Errors are handled automatically",
        "Errors are ignored",
        "Explicit error checking is crucial for robust code",
        "Errors are handled using exceptions"
      ]
    },
    {
      "id": 130,
      "title": "What is the purpose of Go's `time` package?",
      "topic": "go",
      "right": "To provide time-related functions",
      "options": [
        "To manage memory",
        "To provide time-related functions",
        "To handle network requests",
        "To define data structures"
      ]
    },
    {
      "id": 131,
      "title": "What is Go's approach to concurrency?",
      "topic": "go",
      "right": "Lightweight goroutines and channels for communication",
      "options": [
        "Heavyweight threads",
        "Asynchronous callbacks",
        "Lightweight goroutines and channels for communication",
        "Shared memory"
      ]
    },
    {
      "id": 132,
      "title": "What is the significance of Go's built-in testing framework?",
      "topic": "go",
      "right": "It encourages and simplifies writing unit tests",
      "options": [
        "It's optional",
        "It's only for complex projects",
        "It encourages and simplifies writing unit tests",
        "It's used only for integration testing"
      ]
    },
    {
      "id": 133,
      "title": "What is the role of Go's `sync.WaitGroup`?",
      "topic": "go",
      "right": "To wait for a collection of goroutines to finish",
      "options": [
        "To manage memory",
        "To wait for a collection of goroutines to finish",
        "To handle network requests",
        "To define data structures"
      ]
    },
    {
      "id": 134,
      "title": "What is the benefit of Go's static typing?",
      "topic": "go",
      "right": "Improved code reliability and early error detection",
      "options": [
        "Increased code flexibility",
        "Improved code readability",
        "Improved code reliability and early error detection",
        "Reduced code complexity"
      ]
    },
    {
      "id": 135,
      "title": "How does Go handle memory allocation?",
      "topic": "go",
      "right": "Through a garbage collector, automatically reclaiming unused memory",
      "options": [
        "Manually by the programmer",
        "Through a garbage collector, automatically reclaiming unused memory",
        "Using reference counting",
        "It doesn't handle memory allocation"
      ]
    },
    {
      "id": 136,
      "title": "Explain the concept of interfaces in Go.",
      "topic": "go",
      "right": "Interfaces define a set of methods that types can implement.",
      "options": [
        "Interfaces are similar to classes.",
        "Interfaces define a set of methods that types can implement.",
        "Interfaces are used for error handling.",
        "Interfaces are only used for concurrency."
      ]
    },
    {
      "id": 137,
      "title": "What is the purpose of Go's `net/http` package?",
      "topic": "go",
      "right": "To handle HTTP requests and responses.",
      "options": [
        "To manage file I/O",
        "To handle HTTP requests and responses.",
        "To manage concurrency",
        "To define data structures"
      ]
    },
    {
      "id": 138,
      "title": "How do you create a new goroutine that waits for a specific event?",
      "topic": "go",
      "right": "Using channels and `select` statements.",
      "options": [
        "Using timers",
        "Using channels and `select` statements.",
        "Using mutexes",
        "Using `WaitGroup` only"
      ]
    },
    {
      "id": 139,
      "title": "What is a race condition in Go?",
      "topic": "go",
      "right": "When multiple goroutines access and modify shared data concurrently.",
      "options": [
        "A type of error",
        "When multiple goroutines access and modify shared data concurrently.",
        "A memory leak",
        "A deadlock"
      ]
    },
    {
      "id": 140,
      "title": "How can you prevent race conditions in Go?",
      "topic": "go",
      "right": "Using mutexes or other synchronization mechanisms.",
      "options": [
        "By using only one goroutine",
        "Using mutexes or other synchronization mechanisms.",
        "By avoiding shared data",
        "It's not possible to prevent race conditions"
      ]
    },
    {
      "id": 141,
      "title": "What is a deadlock in Go?",
      "topic": "go",
      "right": "A situation where two or more goroutines are blocked indefinitely, waiting for each other.",
      "options": [
        "A type of error",
        "A situation where two or more goroutines are blocked indefinitely, waiting for each other.",
        "A memory leak",
        "A race condition"
      ]
    },
    {
      "id": 142,
      "title": "How do you handle signals (like SIGINT) in Go?",
      "topic": "go",
      "right": "Using the `os/signal` package.",
      "options": [
        "Using exceptions",
        "Using the `os/signal` package.",
        "Ignoring them",
        "Using channels"
      ]
    },
    {
      "id": 143,
      "title": "What is a list comprehension in Python?",
      "topic": "python",
      "right": "A concise way to create lists.",
      "options": [
        "A type of loop",
        "A concise way to create lists.",
        "A way to handle exceptions",
        "A way to define functions"
      ]
    },
    {
      "id": 144,
      "title": "Explain the difference between `append()` and `extend()` in Python lists.",
      "topic": "python",
      "right": "`append()` adds a single element, `extend()` adds multiple.",
      "options": [
        "They are the same.",
        "`append()` adds a single element, `extend()` adds multiple.",
        "`append()` adds multiple, `extend()` adds a single.",
        "They are used for different data types."
      ]
    },
    {
      "id": 145,
      "title": "What is a dictionary in Python?",
      "topic": "python",
      "right": "A collection of key-value pairs.",
      "options": [
        "An ordered list",
        "A collection of key-value pairs.",
        "A set of unique elements",
        "A tuple of elements"
      ]
    },
    {
      "id": 146,
      "title": "How do you handle exceptions in Python?",
      "topic": "python",
      "right": "Using `try...except` blocks.",
      "options": [
        "Using `if...else` statements",
        "Using `try...except` blocks.",
        "Ignoring them",
        "Using `switch` statements"
      ]
    },
    {
      "id": 147,
      "title": "What is a lambda function in Python?",
      "topic": "python",
      "right": "An anonymous function defined using the `lambda` keyword.",
      "options": [
        "A named function",
        "An anonymous function defined using the `lambda` keyword.",
        "A type of class",
        "A way to handle exceptions"
      ]
    },
    {
      "id": 148,
      "title": "What is the purpose of Python's `__init__` method?",
      "topic": "python",
      "right": "It's the constructor for a class.",
      "options": [
        "It's a destructor",
        "It's the constructor for a class.",
        "It's a static method",
        "It's a class method"
      ]
    },
    {
      "id": 149,
      "title": "What is JSX in React?",
      "topic": "react",
      "right": "A syntax extension that allows HTML-like code in React components.",
      "options": [
        "A JavaScript library",
        "A syntax extension that allows HTML-like code in React components.",
        "A CSS framework",
        "A type of event"
      ]
    },
    {
      "id": 150,
      "title": "Explain the concept of props in React.",
      "topic": "react",
      "right": "Data passed from a parent component to a child component.",
      "options": [
        "Data stored in the component's state",
        "Data passed from a parent component to a child component.",
        "Data fetched from an API",
        "Data stored in the component's local storage"
      ]
    },
    {
      "id": 151,
      "title": "What is state in React?",
      "topic": "react",
      "right": "Data that can change over time and cause a component to re-render.",
      "options": [
        "Data passed from a parent component",
        "Data that can change over time and cause a component to re-render.",
        "Data stored in the browser's local storage",
        "Data defined in the component's props"
      ]
    },
    {
      "id": 152,
      "title": "How do you handle events in React?",
      "topic": "react",
      "right": "Using event handlers within JSX.",
      "options": [
        "Using event listeners",
        "Using event handlers within JSX.",
        "Using callbacks",
        "Using promises"
      ]
    },
    {
      "id": 153,
      "title": "What are hooks in React?",
      "topic": "react",
      "right": "Functions that let you hook into React state and lifecycle features from function components.",
      "options": [
        "Classes used for component creation",
        "Functions that let you hook into React state and lifecycle features from function components.",
        "Methods for handling events",
        "Tools for debugging"
      ]
    },
    {
      "id": 154,
      "title": "Explain the concept of conditional rendering in React.",
      "topic": "react",
      "right": "Rendering different UI elements based on certain conditions.",
      "options": [
        "Rendering the same UI elements repeatedly",
        "Rendering different UI elements based on certain conditions.",
        "Rendering UI elements only once",
        "Rendering UI elements asynchronously"
      ]
    },
    {
      "id": 155,
      "title": "What is the purpose of `useEffect` hook in React?",
      "topic": "react",
      "right": "To perform side effects in functional components.",
      "options": [
        "To update the component's state",
        "To perform side effects in functional components.",
        "To handle events",
        "To render UI elements"
      ]
    },
    {
      "id": 156,
      "title": "What is a closure in JavaScript?",
      "topic": "javascript",
      "right": "A function that has access to variables from its surrounding scope, even after that scope has finished executing.",
      "options": [
        "A type of loop",
        "A function that has access to variables from its surrounding scope, even after that scope has finished executing.",
        "A way to handle exceptions",
        "A way to define classes"
      ]
    },
    {
      "id": 157,
      "title": "Explain the difference between `let`, `const`, and `var` in JavaScript.",
      "topic": "javascript",
      "right": "`let` and `const` are block-scoped, `var` is function-scoped.",
      "options": [
        "They are all the same.",
        "`let` and `const` are block-scoped, `var` is function-scoped.",
        "`let` is block-scoped, `const` and `var` are function-scoped.",
        "`let`, `const`, and `var` are all globally scoped."
      ]
    },
    {
      "id": 158,
      "title": "What is an asynchronous function in JavaScript?",
      "topic": "javascript",
      "right": "A function that can pause execution and resume later, often using promises or async/await.",
      "options": [
        "A function that executes immediately",
        "A function that can pause execution and resume later, often using promises or async/await.",
        "A function that handles exceptions",
        "A function that defines a class"
      ]
    },
    {
      "id": 159,
      "title": "What is a promise in JavaScript?",
      "topic": "javascript",
      "right": "An object representing the eventual completion (or failure) of an asynchronous operation.",
      "options": [
        "A type of loop",
        "An object representing the eventual completion (or failure) of an asynchronous operation.",
        "A way to define functions",
        "A way to handle events"
      ]
    },
    {
      "id": 160,
      "title": "Explain the concept of prototypal inheritance in JavaScript.",
      "topic": "javascript",
      "right": "Objects inherit properties and methods from their prototype object.",
      "options": [
        "Objects inherit from classes",
        "Objects inherit properties and methods from their prototype object.",
        "Objects inherit from interfaces",
        "Objects don't inherit"
      ]
    },
    {
      "topic": "go",
      "title": "What is the purpose of Go's `sync.RWMutex`?",
      "right": "To allow multiple readers but only one writer to access a shared resource concurrently.",
      "options": [
        "To allow only one reader and one writer concurrently.",
        "To allow multiple readers but only one writer to access a shared resource concurrently.",
        "To allow only one writer to access a shared resource.",
        "To allow only one reader to access a shared resource."
      ],
      "id": 161
    }
  ]
}
